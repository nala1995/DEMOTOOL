Posibbly the best way to handle the code broadly

import { useState, useEffect } from 'react';
import './App.css';
import Menubarslide from './Menubarslide';
import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import movementData from './movements.json';

function App() {
  const [markerData, setMarkerData] = useState([]);
  const [showMovementData, setShowMovementData] = useState(false);
  const [apiData, setApiData] = useState([]);

  const processMovementData = () => {
    // Realiza un procesamiento previo de los datos para obtener latitud y longitud
    const processedData = movementData.map((array) => ({
      lat: parseFloat(array.latitud),
      lng: parseFloat(array.longitud),
      popupContent: (
        <div>
          <h3>Empresa: {array.CodigoEmpresa}</h3>
          <p>Movimiento: {array.movimiento}</p>
          <p>Empresa Transportista: {array.empresatransporte}</p>
          <p>Peso: {array.peso}</p>
          <p>Tipo de Carga: {array.tipocarga}</p>
          <p>Tipo de Nave: {array.tipoNave}</p>
          <p>Fecha en puerto: {array.OBJECTID2}</p>
        </div>
      ),
    }));
    setMarkerData(processedData);
  };

  const handleTabClick = () => {
    setShowMovementData(true);
  };

  const fetchApiData = async () => {
    try {
      // Realiza la solicitud de la API aquí y obtén los datos en el formato adecuado
      const response = await fetch('https://services7.arcgis.com/n1YM8pTrFmm7L4hs/ArcGIS/rest/services/ndc/FeatureServer/6/query?where=1%3D1&outFields=*&outSR=4326&f=json');
      const data = await response.json();
      return data;
    } catch (error) {
      console.error('Error al obtener datos de la API:', error);
      return null;
    }
  };

  useEffect(() => {
    if (showMovementData) {
      processMovementData();
    }
  }, [showMovementData]);

  useEffect(() => {
    if (apiData.features) {
      // Si tienes datos válidos de la API, procesa y muestra los marcadores
      const processedApiData = apiData.features.map((feature) => ({
        lat: feature.geometry.y,
        lng: feature.geometry.x,
        popupContent: (
          <div>
            <h3>ID: {feature.attributes.ID}</h3>
            <p>ELEVATION: {feature.attributes.ELEVATION}</p>
            {/* Agrega más campos de atributos aquí si es necesario */}
          </div>
        ),
      }));
      setMarkerData((prevMarkerData) => [...prevMarkerData, ...processedApiData]);
    }
  }, [apiData]);

  useEffect(() => {
    if (showMovementData && apiData.length === 0) {
      // Realiza la solicitud de la API solo si showMovementData es verdadero y apiData está vacío
      fetchApiData().then((data) => {
        if (data) {
          setApiData(data);
        }
      });
    }
  }, [showMovementData]);

  return (
    <>
      <div className="app">
        <div className="sidebar-overlay">
          <Menubarslide handleTabClick={handleTabClick} />
        </div>
      </div>
      <div className="map-container">
        <h1 className='title-app'>Foreign Trade & Transportation traffic viewer tool</h1>
        <MapContainer center={[6.9708, -74.2973]} zoom={6} scrollWheelZoom={true}>
          <TileLayer
            attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap </a> contributors'
            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
          />
          {markerData.map((marker, index) => (
            <Marker key={`${marker.lat}-${marker.lng}-${index}`} position={[marker.lat, marker.lng]}>
              <Popup>{marker.popupContent}</Popup>
            </Marker>
          ))}
        </MapContainer>
      </div>
    </>
  );
}

export default App;



// another parth 

import React, { useState } from 'react';

function Menubarslide({ handleTabClick, handleJsonLoad, handleApiLoad }) {
  const [arrowClicked, setArrowClicked] = useState(false);
  const [loadType, setLoadType] = useState(null);

  const handleArrowClick = () => {
    setArrowClicked(!arrowClicked);
  };

  const handleLoadButtonClick = (type) => {
    setLoadType(type);
    if (type === 'json') {
      handleJsonLoad();
    } else if (type === 'api') {
      handleApiLoad();
    }
  };

  return (
    <>
      {arrowClicked && <img className="toggle-button" src={menu} onClick={handleArrowClick} />}
      <div className={`sidebar ${arrowClicked ? 'hidden' : ''}`}>
        <img src={arrow} alt="Atras" className={`arrow-image ${arrowClicked ? 'clicked' : ''}`} onClick={handleArrowClick} />
        <div>
          <button onClick={() => handleLoadButtonClick('json')}>Cargar JSON</button>
          <button onClick={() => handleLoadButtonClick('api')}>Cargar API</button>
          {/* Otros botones aquí */}
        </div>
        {/* Resto del contenido */}
      </div>
    </>
  );
}

export default Menubarslide;

Information to handle the data that wwill be deployed in the map

All the information is being provided for the following sites
JSON Data --> dimar ---Main[https://ide.dimar.mil.co/simam/transporte-maritimo/movimiento-de-carga/
                    -------Source  https://ide.dimar.mil.co/simam/inicio-transporte-maritimo.html
                    -------Source  https://idemaritima.dimar.mil.co/pages/ide-mercante
                    -------Source  https://experience.arcgis.com/experience/8d4226680fb647f9b39f2f72d54e3fe1/page/App/
                    -------Source  https://www.cepal.org/es/search?as_q=geolocalizacion]
API1 Data -->  -------Source[https://geodata.bts.gov/datasets/usdot::navigable-waterway-network-nodes/api]
API2 Data -->  -------Source[https://geodata.bts.gov/datasets/usdot::aviation-facilities/about]
APIMar Data -->       -------Main[https://services.arcgis.com/xOi1kZaI0eWDREZv/arcgis/rest/services/Aviation_Facilities/FeatureServer/0/query?outFields=*&where=1%3D1]  
APIAir Data -->       -------Main[https://services.arcgis.com/xOi1kZaI0eWDREZv/arcgis/rest/services/Aviation_Facilities/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson]

Frameworks which were used to develop the project
UX / UI Design --> []
Frontend --> [ReactJS]
              [https://www.radix-ui.com/]
Map-Framework --> [LeafletJS https://react-leaflet.js.org/docs/api-map/]
Backend --> [NodeJS]
Database --> [MongoDB]

